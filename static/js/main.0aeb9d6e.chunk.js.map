{"version":3,"sources":["github-logo.svg","components/globalStyles.js","components/container.js","components/form.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GlobalStyles","createGlobalStyle","_templateObject","Container","styled","div","container_templateObject","container","_ref","children","react_default","a","createElement","RootSize","form_templateObject","Input","input","_templateObject2","SubInput","_templateObject3","Result","_templateObject4","F","form","_templateObject5","Px","_templateObject6","Rem","_templateObject7","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rootSize","pixel","rem","handleChange","bind","assertThisInitialized","e","_this$state","_e$target","target","name","value","setState","console","error","type","onChange","disabled","Component","Footer","footer","footer_templateObject","Link","footer_templateObject2","Img","img","footer_templateObject3","href","src","github","alt","GoogleFonts","importGoogleFonts","Top","App_templateObject","Title","App_templateObject2","H1","h1","App_templateObject3","Description","App_templateObject4","App","Fragment","globalStyles","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0aeb9d6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.76d344f0.svg\";","import {createGlobalStyle} from 'styled-components'\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  html, body {\n    width: 100%;\n    height: 100%;\n  }\n`\n\nexport default GlobalStyles\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  // width: 100%;\n  // margin-left: auto;\n  // margin-right: auto;\n  // display: flex;\n  // flex-direction: column;\n  min-height: 100vh;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 10rem;\n`\n\nexport default ({children}) => <Container>{children}</Container>\n","import React, {Component} from 'react'\nimport styled from 'styled-components'\n\nconst RootSize = styled.div`\n  background-color: #565264;\n  text-align: center;\n  color: #d6cfcb;\n  font-size: 1.4rem;\n  padding-top: 1rem;\n  grid-column: 1 / 3;\n`\n\nconst Input = styled.input`\n  padding: 1.4rem 1rem 0.4rem 1rem;\n  font-size: 1.5rem;\n  -webkit-appearance: none !important;\n  outline: none;\n  border: 0;\n  width: 4.5rem;\n  color: #a6808c;\n  border-radius: 0.4rem 0 0 0.4rem;\n`\nconst SubInput = styled.input`\n  padding: 1.4rem 0.3rem 0.4rem 1rem;\n  font-size: 1.5rem;\n  -webkit-appearance: none !important;\n  color: #ccb7ae;\n  text-align: right;\n  width: 2.5rem;\n  border: 0;\n  border-radius: 0 0.4rem 0.4rem 0;\n`\n\nconst Result = styled.div`\n  grid-column: 1 / 3;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  // margin-top: 2rem;\n  height: 12.5rem;\n  padding-top: 6.25rem;\n`\n\nconst F = styled.form`\n  // flex: 1;\n  background-color: #ece2d0;\n  grid-column: 1 / 3;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 7rem 7rem;\n`\n\nconst Px = styled.div`\n  // width: 50%;\n  text-align: center;\n`\n\nconst Rem = styled.div`\n  // width: 50%;\n  text-align: center;\n`\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {rootSize: '16', pixel: '16', rem: '1'}\n\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(e) {\n    const {rootSize, pixel} = this.state\n    const {name, value} = e.target\n\n    switch (name) {\n      case 'rootSize':\n        this.setState({rootSize: value, rem: pixel / value})\n        break\n      case 'pixel':\n        this.setState({pixel: value, rem: value / rootSize})\n        break\n      case 'rem':\n        this.setState({rem: value, pixel: rootSize * value})\n        break\n      default:\n        console.error('Eww??')\n        break\n    }\n  }\n\n  render() {\n    return (\n      <F>\n        <RootSize>\n          <label>Root Size: </label>\n          <Input\n            type=\"text\"\n            value={this.state.rootSize}\n            name=\"rootSize\"\n            onChange={this.handleChange}\n          />\n          <SubInput type=\"text\" value=\"px\" disabled />\n        </RootSize>\n        <Result>\n          <Px>\n            <Input\n              type=\"text\"\n              value={this.state.pixel}\n              name=\"pixel\"\n              onChange={this.handleChange}\n            />\n            <SubInput type=\"text\" value=\"px\" disabled />\n          </Px>\n          <Rem>\n            <Input\n              type=\"text\"\n              value={this.state.rem}\n              name=\"rem\"\n              onChange={this.handleChange}\n            />\n            <SubInput type=\"text\" value=\"rem\" disabled />\n          </Rem>\n        </Result>\n      </F>\n    )\n  }\n}\n\nexport default Form\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport github from '../github-logo.svg'\n\nconst Footer = styled.footer`\n  background-color: #ece2d0;\n  grid-column: 1 / 3;\n  text-align: center;\n  color: #565264;\n`\n\nconst Link = styled.a`\n  color: inherit;\n  text-decoration: inherit;\n`\n\nconst Img = styled.img`\n  height: 1rem;\n`\n\nexport default () => (\n  <Footer>\n    Made by <Link href=\"https://nayed.io\">Nayed Sa√Ød Ali</Link> -{' '}\n    <Link href=\"https://github.com/nayed/sonfitze\">\n      <Img src={github} alt=\"github logo\" />\n    </Link>\n  </Footer>\n)\n","import React, {Component} from 'react'\nimport styled, {createGlobalStyle} from 'styled-components'\nimport importGoogleFonts from 'import-google-fonts'\n\nimport GlobalStyles from './components/globalStyles'\nimport Container from './components/container'\nimport Form from './components/form'\nimport Footer from './components/footer'\n\nconst GoogleFonts = importGoogleFonts(createGlobalStyle, null, [\n  'Vast Shadow',\n  'Playfair Display'\n])\n\nconst Top = styled.div`\n  background-color: #565264;\n  // padding-bottom: 1rem;\n  // width: 100%;\n  padding-top: 1.75rem;\n  grid-column: 1 / 3;\n  // grid-row: 1 / 2;\n`\n\nconst Title = styled.div`\n  text-align: center;\n  color: #d6cfcb;\n  margin: 0\n  padding: 0.875rem 0;\n  border-top: 0.25rem double #ccb7ae;\n  border-bottom: 0.25rem double #ccb7ae;\n`\n\nconst H1 = styled.h1`\n  font: 2.5rem 'Vast Shadow', 'Arial Black';\n  text-transform: uppercase;\n`\n\nconst Description = styled.p`\n  font: 1.25rem 'Playfair Display';\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GlobalStyles />\n        <GoogleFonts />\n        <Container>\n          <Top>\n            <Title>\n              <H1>Sonfitze</H1>\n              <Description>Font size converter</Description>\n            </Title>\n          </Top>\n          <Form />\n          <Footer />\n        </Container>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}